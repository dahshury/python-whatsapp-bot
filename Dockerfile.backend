###############################
# Builder: install deps only  #
###############################
FROM python:3.12-slim AS builder
WORKDIR /app

# Build tooling only in builder
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy project metadata for dependency installation
COPY pyproject.toml ./
# Include README to satisfy build metadata during editable install
COPY README.md ./

# Install uv without pip and resolve the backend environment into .venv
ENV PATH="/root/.local/bin:${PATH}"
RUN curl -LsSf https://astral.sh/uv/install.sh | sh \
    && uv --version \
    && uv sync --extra backend --no-dev \
    && uv cache clean \
    && rm -rf /root/.cache

###############################
# Runtime: slim final image   #
###############################
FROM python:3.12-slim AS runtime
WORKDIR /app

LABEL org.opencontainers.image.title="python-whatsapp-bot-backend"
LABEL org.opencontainers.image.description="Backend service for python-whatsapp-bot"
LABEL com.dahshury.prunable="true"
LABEL org.opencontainers.image.licenses="MIT"

# Minimal runtime OS deps only
RUN apt-get update && apt-get install -y --no-install-recommends \
    zip \
    awscli \
    ca-certificates \
    sqlite3 \
    && rm -rf /var/lib/apt/lists/*

# Ensure the uv-created venv is used at runtime
ENV PATH="/app/.venv/bin:${PATH}"

# Create required directories
RUN mkdir -p /app/data \
    && mkdir -p /app/backups

# Bring the resolved virtualenv from the builder
COPY --from=builder /app/.venv /app/.venv

# Copy only backend code (not frontend)
COPY run.py .
COPY app/config.py app/config.py
COPY app/__init__.py app/__init__.py
COPY app/db.py app/db.py
COPY app/auth/ app/auth/
COPY app/i18n.py app/i18n.py
COPY app/metrics.py app/metrics.py
COPY app/scheduler.py app/scheduler.py
COPY app/views.py app/views.py
COPY app/utils/ app/utils/
COPY app/services/ app/services/
COPY app/decorators/ app/decorators/
COPY scripts/ /app/scripts/

# Include license files in image
COPY LICENSE /licenses/
COPY LICENCE.txt /licenses/

# Set environment variable to point to persisted database location
ENV DB_PATH=/app/data/threads_db.sqlite

# Expose FastAPI port
EXPOSE 8000

# Default command runs the FastAPI app; scheduler starts automatically
CMD ["python", "run.py"]