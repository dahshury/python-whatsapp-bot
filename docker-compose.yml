# Local docker-compose configuration

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: reservation_backend
    env_file:
      - .env
    ports:
      - '8000:8000'
    depends_on:
      - prometheus
    environment:
      - ENV=${ENVIRONMENT:-development}
      - DB_PATH=/app/data/threads_db.sqlite
    volumes:
      - ${MOUNT_BACKEND:-./app:/app/app}
      - ./run.py:/app/run.py
      - ./data:/app/data
      - ./.env:/app/.env
      - ./scripts:/app/scripts
      - /home/ubuntu/.config/rclone/rclone.conf:/root/.config/rclone/rclone.conf
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      sh -c "mkdir -p /app/data &&
             # If a legacy DB exists in working dir, migrate it into the mounted volume once
             if [ -f /app/threads_db.sqlite ] && [ ! -f /app/data/threads_db.sqlite ]; then
               echo 'Migrating legacy DB to data volume...';
               mv /app/threads_db.sqlite /app/data/threads_db.sqlite || cp /app/threads_db.sqlite /app/data/threads_db.sqlite;
             fi;
             # Ensure WAL is checkpointed if present before starting
             if [ -f /app/data/threads_db.sqlite ]; then
               echo 'Checkpointing WAL (TRUNCATE) before startup...';
               sqlite3 /app/data/threads_db.sqlite 'PRAGMA wal_checkpoint(TRUNCATE);' || true;
             fi;
             uvicorn run:app --host 0.0.0.0 --port 8000"
  frontend:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
    container_name: reservation_frontend
    env_file:
      - .env
    ports:
      - '3000:3000'
    depends_on:
      - backend
    environment:
      - ENV=${ENVIRONMENT:-development}
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
    ports:
      - '9090:9090'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=24h'
    restart: on-failure

  alertmanager:
    image: prom/alertmanager:v0.28.0
    container_name: alertmanager
    volumes:
      - type: bind
        source: ./prometheus/alertmanager.yml
        target: /etc/alertmanager/alertmanager.yml
        read_only: true
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    ports:
      - '9093:9093'
    restart: on-failure


  # Alertmanager Discord adapter: formats alerts into rich embeds
  discord-adapter:
    image: benjojo/alertmanager-discord:latest
    container_name: alertmanager_discord
    env_file:
      - .env
    environment:
      - LISTEN_ADDRESS=0.0.0.0:9094
    ports:
      - '9094:9094'
    restart: on-failure
